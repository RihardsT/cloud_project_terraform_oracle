name: "Terraform Plan"
on:
  pull_request:
env:
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prep the required secrets
        run: |
          echo "${{ secrets.BACKEND }}" | base64 -d > backend
          echo "${{ secrets.OCI_PEM }}" | base64 -d > oci.pem
          echo "${{ secrets.TERRAFORM_TFVARS }}" > terraform.tfvars # | base64 -d
      - name: Get tfer
        run: |
          wget https://raw.githubusercontent.com/RihardsT/tfer/refs/heads/main/tfer
          chmod +x tfer
      - name: Terraform Init
        run: ./tfer init -backend-config=../backend
      - name: Terraform Plan
        run: ./tfer plan -out=../plan.out
      - name: Cache Terraform Plan
        uses: actions/cache/save@v4
        with:
          path: |
            plan.out
          key: terraform_plan-${{github.run_id}}-${{github.run_attempt}}
      ##### 
      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: plan.out
      #####
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Output')
            });
            const output = `#### Terraform Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
